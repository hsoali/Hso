import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

export const createRoom = mutation({
  args: {
    playerName: v.string(),
  },
  handler: async (ctx, args) => {
    const code = Math.random().toString(36).substring(2, 8).toUpperCase();
    
    const roomId = await ctx.db.insert("rooms", {
      code,
      status: "waiting",
      currentPuzzle: 0,
      maxPlayers: 4,
      minPlayers: 2,
    });

    await ctx.db.insert("players", {
      roomId,
      name: args.playerName,
      color: "red",
      position: { x: 0, y: 0 },
      ready: false
    });

    return { roomId, code };
  },
});

export const joinRoom = mutation({
  args: {
    code: v.string(),
    playerName: v.string(),
  },
  handler: async (ctx, args) => {
    const room = await ctx.db
      .query("rooms")
      .withIndex("by_code", (q) => q.eq("code", args.code))
      .unique();
    
    if (!room) throw new Error("Room not found");

    const players = await ctx.db
      .query("players")
      .withIndex("by_room", (q) => q.eq("roomId", room._id))
      .collect();

    if (players.length >= room.maxPlayers) {
      throw new Error("Room is full");
    }

    const colors = ["red", "blue", "green", "yellow"];
    const usedColors = new Set(players.map(p => p.color));
    const availableColor = colors.find(c => !usedColors.has(c)) || "gray";

    await ctx.db.insert("players", {
      roomId: room._id,
      name: args.playerName,
      color: availableColor,
      position: { x: 0, y: 0 },
      ready: false
    });

    return { roomId: room._id };
  },
});

export const getRoomByCode = query({
  args: { code: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("rooms")
      .withIndex("by_code", (q) => q.eq("code", args.code))
      .unique();
  },
});

export const getPlayers = query({
  args: { roomId: v.id("rooms") },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("players")
      .withIndex("by_room", (q) => q.eq("roomId", args.roomId))
      .collect();
  },
});
